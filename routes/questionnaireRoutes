const express = require('express');
const router = express.Router();
const s3 = require('../src/utils/spacesConfig');
const Questionnaire = require('../models/Questionnaire');
const authMiddleware = require('../middleware/authMiddleware');
const multer = require('multer');
const sharp = require('sharp');
const imageRoutes = require('./imageRoutes');
const deleteImageFromSpaces = imageRoutes.deleteImageFromSpaces;

const upload = multer();

router.use((req, res, next) => {
  console.log('Route appelée:', req.method, req.url, 'avec le body:', req.body);
  next();
});

// GET tous les questionnaires publics
router.get('/public', async (req, res) => {
  try {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const skip = (page - 1) * limit;
    const search = req.query.search || '';
    const modality = req.query.modality ? req.query.modality.split(',') : [];
    const specialty = req.query.specialty ? req.query.specialty.split(',') : [];
    const location = req.query.location ? req.query.location.split(',') : [];

    const query = { public: true };
    if (search) {
      query.$or = [
        { title: { $regex: search, $options: 'i' } },
        { tags: { $regex: search, $options: 'i' } }
      ];
    }

    const tagFilters = [...modality, ...specialty, ...location];
    if (tagFilters.length > 0) {
      query.tags = { $all: tagFilters };
    }

    const totalQuestionnaires = await Questionnaire.countDocuments(query);
    const questionnaires = await Questionnaire.find(query)
      .skip(skip)
      .limit(limit)
      .sort({ createdAt: -1 });

    res.json({
      questionnaires,
      currentPage: page,
      totalPages: Math.ceil(totalQuestionnaires / limit),
      totalQuestionnaires
    });
  } catch (error) {
    console.error("Erreur lors de la récupération des questionnaires publics:", error);
    res.status(500).json({ message: error.message });
  }
});

// GET un questionnaire spécifique
router.get('/:id', authMiddleware, async (req, res) => {
  try {
    const questionnaire = await Questionnaire.findOne({ _id: req.params.id, user: req.userId });
    if (!questionnaire) {
      console.log(`Questionnaire avec l'ID ${req.params.id} non trouvé pour l'utilisateur ${req.userId}`);
      return res.status(404).json({ message: 'Questionnaire non trouvé' });
    }
    res.json(questionnaire);
  } catch (error) {
    console.error(`Erreur lors de la récupération du questionnaire ${req.params.id}:`, error);
    res.status(500).json({ message: error.message });
  }
});

// GET tous les questionnaires d'un utilisateur
router.get('/', authMiddleware, async (req, res) => {
  try {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const skip = (page - 1) * limit;
    const search = req.query.search || '';
    const modality = req.query.modality ? req.query.modality.split(',') : [];
    const specialty = req.query.specialty ? req.query.specialty.split(',') : [];
    const location = req.query.location ? req.query.location.split(',') : [];

    const query = { user: req.userId };
    if (search) {
      query.$or = [
        { title: { $regex: search, $options: 'i' } },
        { tags: { $regex: search, $options: 'i' } }
      ];
    }

    const tagFilters = [...modality, ...specialty, ...location];
    if (tagFilters.length > 0) {
      query.tags = { $all: tagFilters };
    }

    const totalQuestionnaires = await Questionnaire.countDocuments(query);
    const questionnaires = await Questionnaire.find(query)
      .skip(skip)
      .limit(limit)
      .sort({ createdAt: -1 });

    res.json({
      questionnaires,
      currentPage: page,
      totalPages: Math.ceil(totalQuestionnaires / limit),
      totalQuestionnaires
    });
  } catch (error) {
    console.error('Erreur lors de la récupération des questionnaires:', error);
    res.status(500).json({ message: error.message });
  }
});

// GET liens d'un élément
router.get('/:id/links/:elementId', authMiddleware, async (req, res) => {
  try {
    const questionnaire = await Questionnaire.findById(req.params.id);
    if (!questionnaire) {
      return res.status(404).json({ message: 'Questionnaire non trouvé' });
    }
    const links = questionnaire.links.get(req.params.elementId) || [];
    res.json({ links });
  } catch (error) {
    console.error('Erreur lors de la récupération des liens:', error);
    res.status(500).json({ message: error.message });
  }
});

// DELETE supprimer un lien spécifique
router.delete('/:id/links/:elementId/:linkIndex', authMiddleware, async (req, res) => {
  try {
    const questionnaire = await Questionnaire.findById(req.params.id);
    if (!questionnaire) {
      return res.status(404).json({ message: 'Questionnaire non trouvé' });
    }

    const elementId = req.params.elementId;
    const linkIndex = parseInt(req.params.linkIndex);
    
    // Récupérer les liens existants
    let links = questionnaire.links.get(elementId) || [];
    
    // Supprimer le lien spécifique
    if (linkIndex >= 0 && linkIndex < links.length) {
      links.splice(linkIndex, 1);
      
      // Si aucun lien ne reste, supprimer complètement l'entrée
      if (links.length === 0) {
        questionnaire.links.delete(elementId);
      } else {
        questionnaire.links.set(elementId, links);
      }
      
      questionnaire.markModified('links');
      await questionnaire.save();
      
      res.json({ message: 'Lien supprimé avec succès', links });
    } else {
      res.status(404).json({ message: 'Index de lien invalide' });
    }
  } catch (error) {
    console.error('Erreur lors de la suppression du lien:', error);
    res.status(500).json({ message: error.message });
  }
});


// POST nouveau questionnaire
const processImagesRecursively = async (item, questionnaireTitle, parentId = '') => {
  console.log(`Traitement de l'item : ${item.id} pour le questionnaire : ${questionnaireTitle}`);
  
  if (item.image && item.image.src) {
    console.log(`Traitement de l'image pour l'item : ${item.id}`);
    try {
      item.image.src = await compressAndUploadImage(item.image.src, questionnaireTitle, `${parentId}_${item.id}`);
    } catch (error) {
      console.error(`Erreur lors du traitement de l'image pour l'item ${item.id}:`, error);
    }
  }
  
  if (item.options) {
    for (let option of item.options) {
      await processImagesRecursively(option, questionnaireTitle, `${parentId}_${item.id}`);
    }
  }
  
  if (item.subQuestions) {
    for (let subQuestion of item.subQuestions) {
      await processImagesRecursively(subQuestion, questionnaireTitle, `${parentId}_${item.id}`);
    }
  }
};

router.post('/', authMiddleware, async (req, res) => {
  try {
    const { title, questions, selectedOptions, crData, hiddenQuestions } = req.body;
    
    console.log(`Création du questionnaire : ${title}`);
    for (let question of questions) {
      await processImagesRecursively(question, title);
    }

    const questionnaire = new Questionnaire({
      title,
      questions,
      selectedOptions,
      crData,
      hiddenQuestions,
      user: req.userId,
      links: new Map()
    });

    const newQuestionnaire = await questionnaire.save();
    res.status(201).json(newQuestionnaire);
  } catch (error) {
    console.error('Erreur lors de la création du questionnaire:', error);
    res.status(500).json({ message: error.message });
  }
});

// POST sauvegarder un lien
router.post('/:id/links', authMiddleware, async (req, res) => {
  try {
    const { elementId, content, linkIndex, title } = req.body; // Ajout de title
    const questionnaire = await Questionnaire.findById(req.params.id);
    
    if (!questionnaire) {
      return res.status(404).json({ message: 'Questionnaire non trouvé' });
    }

    // Obtenir les liens existants ou créer un nouveau tableau
    let existingLinks = questionnaire.links.get(elementId) || [];
    
    // Si un linkIndex est fourni, mettre à jour le lien existant
    if (typeof linkIndex !== 'undefined') {
      existingLinks[linkIndex] = {
        content,
        title, // Ajout du titre
        date: new Date()
      };
    } else {
      // Sinon, ajouter un nouveau lien
      existingLinks.push({
        content,
        title, // Ajout du titre
        date: new Date()
      });
    }

    // Mettre à jour la Map avec le tableau mis à jour
    questionnaire.links.set(elementId, existingLinks);
    questionnaire.markModified('links');

    await questionnaire.save();
    res.json({ message: 'Lien sauvegardé avec succès', links: existingLinks });
  } catch (error) {
    console.error('Erreur lors de la sauvegarde du lien:', error);
    res.status(500).json({ message: error.message });
  }
});

// POST images pour les liens
router.post('/:id/links-images', authMiddleware, upload.single('file'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: 'Aucun fichier n\'a été uploadé' });
    }

    // Optimisation de l'image
    const optimizedImageBuffer = await sharp(req.file.buffer)
      .resize(1200, 1200, { fit: 'inside', withoutEnlargement: true })
      .jpeg({ quality: 80 })
      .toBuffer();

    const fileName = `${Date.now()}-${req.file.originalname}`;
    const params = {
      Bucket: process.env.DO_SPACES_BUCKET,
      Key: `questionnaires/${req.params.id}/links-images/${fileName}`,
      Body: optimizedImageBuffer,
      ACL: 'public-read',
      ContentType: 'image/jpeg',
      CacheControl: 'public, max-age=31536000'
    };

    const uploadResult = await s3.upload(params).promise();
    res.json({ location: uploadResult.Location });
  } catch (error) {
    console.error('Erreur lors de l\'upload de l\'image:', error);
    res.status(500).json({ error: error.message });
  }
});

// PUT mise à jour d'un questionnaire
router.put('/:id', authMiddleware, async (req, res) => {
  try {
    const { questions, ...rest } = req.body;
    
    // Nettoyer et valider les données des questions
    const cleanedQuestions = questions.map(q => {
      if (q.type === 'imageMap' && q.questionImage) {
        return {
          ...q,
          questionImage: {
            src: q.questionImage.src,
            areas: Array.isArray(q.questionImage.areas) ? q.questionImage.areas : []
          }
        };
      }
      return q;
    });

    const updatedQuestionnaire = await Questionnaire.findOneAndUpdate(
      { _id: req.params.id, user: req.userId },
      { ...rest, questions: cleanedQuestions },
      { new: true }
    );

    if (!updatedQuestionnaire) {
      return res.status(404).json({ message: 'Questionnaire non trouvé' });
    }

    res.json(updatedQuestionnaire);
  } catch (error) {
    console.error('Erreur lors de la mise à jour:', error);
    res.status(500).json({ message: error.message });
  }
});

// DELETE un questionnaire
router.delete('/:id', authMiddleware, async (req, res) => {
  try {
    const questionnaire = await Questionnaire.findOne({ _id: req.params.id, user: req.userId });
    if (!questionnaire) {
      return res.status(404).json({ message: 'Questionnaire non trouvé' });
    }

    // Suppression des images
    const deleteImagesRecursively = async (questions) => {
      for (const question of questions) {
        if (question.image && question.image.src) {
          const urlParts = question.image.src.split('/');
          const fileName = urlParts[urlParts.length - 1];
          await deleteImageFromSpaces(questionnaire.title, fileName);
        }
        if (question.options) {
          for (const option of question.options) {
            if (option.image && option.image.src) {
              const urlParts = option.image.src.split('/');
              const fileName = urlParts[urlParts.length - 1];
              await deleteImageFromSpaces(questionnaire.title, fileName);
            }
            if (option.subQuestions) {
              await deleteImagesRecursively(option.subQuestions);
            }
          }
        }
      }
    };

    // Suppression des images des liens
    const deleteLinkImages = async () => {
      try {
        const listParams = {
          Bucket: process.env.DO_SPACES_BUCKET,
          Prefix: `questionnaires/${questionnaire._id}/links-images/`
        };
        const listedObjects = await s3.listObjectsV2(listParams).promise();
        if (listedObjects.Contents.length > 0) {
          const deleteParams = {
            Bucket: process.env.DO_SPACES_BUCKET,
            Delete: { Objects: listedObjects.Contents.map(({ Key }) => ({ Key })) }
          };
          await s3.deleteObjects(deleteParams).promise();
        }
      } catch (error) {
        console.error('Erreur lors de la suppression des images des liens:', error);
      }
    };

    await deleteImagesRecursively(questionnaire.questions);
    await deleteLinkImages();
    await Questionnaire.findOneAndDelete({ _id: req.params.id, user: req.userId });

    res.json({ message: 'Questionnaire supprimé avec succès', id: req.params.id });
  } catch (error) {
    console.error('Erreur lors de la suppression du questionnaire:', error);
    res.status(500).json({ message: error.message });
  }
});

// PATCH pour basculer la visibilité publique
router.patch('/:id/togglePublic', authMiddleware, async (req, res) => {
  try {
    const questionnaire = await Questionnaire.findOne({ _id: req.params.id, user: req.userId });
    if (!questionnaire) {
      return res.status(404).json({ message: 'Questionnaire non trouvé' });
    }
    questionnaire.public = !questionnaire.public;
    await questionnaire.save();
    res.json(questionnaire);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Route pour ajouter un tag
router.post('/:id/tags', authMiddleware, async (req, res) => {
  try {
    // Modifier cette ligne pour inclure la vérification de l'utilisateur
    const questionnaire = await Questionnaire.findOne({ 
      _id: req.params.id,
      user: req.userId  // Ajouter cette condition
    });

    if (!questionnaire) {
      return res.status(404).json({ message: 'Questionnaire non trouvé' });
    }

    const { tag } = req.body;
    if (!tag) {
      return res.status(400).json({ message: 'Tag requis' });
    }

    // Si tags n'existe pas, on l'initialise
    if (!questionnaire.tags) {
      questionnaire.tags = [];
    }

    // Ajouter le tag s'il n'existe pas déjà
    if (!questionnaire.tags.includes(tag)) {
      questionnaire.tags.push(tag);
      await questionnaire.save();
    }

    res.json({ tags: questionnaire.tags });
  } catch (error) {
    console.error('Erreur lors de l\'ajout du tag:', error);
    res.status(500).json({ message: error.message });
  }
});

// Route pour supprimer un tag
router.delete('/:id/tags/:tag', authMiddleware, async (req, res) => {
  try {
    const questionnaire = await Questionnaire.findOne({ 
      _id: req.params.id,
      user: req.userId  // Ajouter cette condition également ici
    });
    
    if (!questionnaire) {
      return res.status(404).json({ message: 'Questionnaire non trouvé' });
    }

    // Retirer le tag
    questionnaire.tags = questionnaire.tags.filter(t => t !== req.params.tag);
    await questionnaire.save();

    res.json({ tags: questionnaire.tags });
  } catch (error) {
    console.error('Erreur lors de la suppression du tag:', error);
    res.status(500).json({ message: error.message });
  }
});
// POST copier un questionnaire (public ou privé)
router.post('/:id/copy', authMiddleware, async (req, res) => {
  try {
    console.log('Tentative de copie du questionnaire:', req.params.id);
    console.log('ID utilisateur:', req.userId);

    // Chercher le questionnaire parmi ceux de l'utilisateur
    let originalQuestionnaire = await Questionnaire.findOne({
      _id: req.params.id,
      $or: [
        { user: req.userId },
        { public: true }
      ]
    });

    if (!originalQuestionnaire) {
      console.log('Questionnaire non trouvé');
      return res.status(404).json({
        message: 'Questionnaire non trouvé ou accès non autorisé'
      });
    }

    console.log('Questionnaire trouvé, création de la copie');
    const newQuestionnaire = new Questionnaire({
      ...originalQuestionnaire.toObject(),
      _id: undefined,
      title: `${originalQuestionnaire.title} (copie)`,
      public: false,
      user: req.userId,
      links: new Map(originalQuestionnaire.links),
      createdAt: new Date(),
      updatedAt: new Date()
    });

    console.log('Sauvegarde de la copie');
    await newQuestionnaire.save();
    console.log('Copie sauvegardée avec succès');

    res.status(201).json({
      message: 'Questionnaire copié avec succès',
      id: newQuestionnaire._id,
      questionnaire: newQuestionnaire
    });

  } catch (error) {
    console.error('Erreur lors de la copie du questionnaire:', error);
    res.status(500).json({ message: error.message });
  }
});

module.exports = router;